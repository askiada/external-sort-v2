// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	key "github.com/askiada/external-sort-v2/internal/vector/key"
	mock "github.com/stretchr/testify/mock"
)

// MockAllocateKeyFn is an autogenerated mock type for the AllocateKeyFn type
type MockAllocateKeyFn struct {
	mock.Mock
}

// Execute provides a mock function with given fields: row
func (_m *MockAllocateKeyFn) Execute(row interface{}) (key.Key, error) {
	ret := _m.Called(row)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 key.Key
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (key.Key, error)); ok {
		return rf(row)
	}
	if rf, ok := ret.Get(0).(func(interface{}) key.Key); ok {
		r0 = rf(row)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(key.Key)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(row)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockAllocateKeyFn creates a new instance of MockAllocateKeyFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAllocateKeyFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAllocateKeyFn {
	mock := &MockAllocateKeyFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
