// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	key "github.com/askiada/external-sort-v2/internal/vector/key"
	mock "github.com/stretchr/testify/mock"
)

// MockKey is an autogenerated mock type for the Key type
type MockKey struct {
	mock.Mock
}

// Equal provides a mock function with given fields: v2
func (_m *MockKey) Equal(v2 key.Key) bool {
	ret := _m.Called(v2)

	if len(ret) == 0 {
		panic("no return value specified for Equal")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(key.Key) bool); ok {
		r0 = rf(v2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Less provides a mock function with given fields: v2
func (_m *MockKey) Less(v2 key.Key) bool {
	ret := _m.Called(v2)

	if len(ret) == 0 {
		panic("no return value specified for Less")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(key.Key) bool); ok {
		r0 = rf(v2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Value provides a mock function with given fields:
func (_m *MockKey) Value() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// NewMockKey creates a new instance of MockKey. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKey(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKey {
	mock := &MockKey{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
